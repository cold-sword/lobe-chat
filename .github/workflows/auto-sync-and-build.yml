name: Auto Sync and Build Custom Docker Image

on:
  workflow_dispatch:
    inputs:
      force_build:
        description: 'Force build even if no updates'
        required: false
        default: false
        type: boolean
  schedule:
    - cron: '0 2 * * *'
  push:
    branches: [ main ]
    paths:
      - 'Dockerfile.database'
      - '.github/workflows/auto-sync-and-build.yml'

concurrency:
  group: ${{ github.ref }}-auto-sync
  cancel-in-progress: true

env:
  REGISTRY_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/lobe-chat-database
  UPSTREAM_REPO: lobehub/lobe-chat

jobs:
  check-sync-and-build:
    runs-on: ubuntu-latest
    outputs:
      has_updates: ${{ steps.check_updates.outputs.has_updates }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Configure git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
    
    - name: Add upstream remote and fetch
      run: |
        git remote add upstream https://github.com/${{ env.UPSTREAM_REPO }}.git || true
        git fetch upstream
    
    - name: Check for updates
      id: check_updates
      run: |
        LOCAL_COMMIT=$(git rev-parse HEAD)
        UPSTREAM_COMMIT=$(git rev-parse upstream/main)
        
        echo "Local commit: $LOCAL_COMMIT"
        echo "Upstream commit: $UPSTREAM_COMMIT"
        
        if [ "$LOCAL_COMMIT" != "$UPSTREAM_COMMIT" ] || [ "${{ github.event.inputs.force_build }}" == "true" ]; then
          echo "has_updates=true" >> $GITHUB_OUTPUT
          echo "Updates found or force build requested!"
        else
          echo "has_updates=false" >> $GITHUB_OUTPUT
          echo "No updates found."
        fi
    
    - name: Merge upstream changes
      if: steps.check_updates.outputs.has_updates == 'true'
      run: |
        echo "Merging upstream changes..."
        git checkout main
        git merge upstream/main --no-edit || {
          echo "Merge conflict detected. Manual intervention required."
          exit 1
        }
    
    - name: Modify Dockerfile.database
      if: steps.check_updates.outputs.has_updates == 'true'
      run: |
        echo "Modifying Dockerfile.database..."
        
        DOCKERFILE="Dockerfile.database"
        
        if [ ! -f "$DOCKERFILE" ]; then
          echo "Error: $DOCKERFILE not found!"
          exit 1
        fi
        
        # Create backup
        cp "$DOCKERFILE" "${DOCKERFILE}.bak"
        
        # Remove existing Clerk environment variables if they exist
        if grep -q "NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY" "$DOCKERFILE"; then
          echo "Updating existing Clerk environment variables..."
          sed -i '/NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY/d' "$DOCKERFILE"
          sed -i '/CLERK_SECRET_KEY/d' "$DOCKERFILE"
          sed -i '/CLERK_WEBHOOK_SECRET/d' "$DOCKERFILE"
        fi
        
        # Find appropriate location to insert environment variables
        if grep -q "^ENV" "$DOCKERFILE"; then
          # Add after the last ENV line
          sed -i '/^ENV.*$/a\
ENV    NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY="pk_test_ZXF1YWwtYmlyZC0zMy5jbGVyay5hY2NvdW50cy5kZXYk" \\\
           CLERK_SECRET_KEY="sk_test_isQsOJa8r2dWYiflNYI2TTJ5ywILxRBJ0Isj2SCNL0" \\\
           CLERK_WEBHOOK_SECRET="whsec_Ykr6ltPoruyQNl6BY8sMwcMzTidxX6Fi"' "$DOCKERFILE"
        else
          # If no ENV line exists, add after FROM line
          sed -i '/^FROM.*$/a\
ENV    NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY="pk_test_ZXF1YWwtYmlyZC0zMy5jbGVyay5hY2NvdW50cy5kZXYk" \\\
           CLERK_SECRET_KEY="sk_test_isQsOJa8r2dWYiflNYI2TTJ5ywILxRBJ0Isj2SCNL0" \\\
           CLERK_WEBHOOK_SECRET="whsec_Ykr6ltPoruyQNl6BY8sMwcMzTidxX6Fi"' "$DOCKERFILE"
        fi
        
        # Modify NEXT_PUBLIC_ENABLE_NEXT_AUTH value
        sed -i 's/NEXT_PUBLIC_ENABLE_NEXT_AUTH:-1/NEXT_PUBLIC_ENABLE_NEXT_AUTH:-0/g' "$DOCKERFILE"
        
        echo "Dockerfile modifications completed"
        
        # Show changes
        echo "Changes made to Dockerfile:"
        diff "${DOCKERFILE}.bak" "$DOCKERFILE" || true

  build-multiarch:
    needs: check-sync-and-build
    if: needs.check-sync-and-build.outputs.has_updates == 'true'
    strategy:
      matrix:
        include:
          - platform: linux/amd64
            os: ubuntu-latest
          - platform: linux/arm64
            os: ubuntu-24.04-arm
    runs-on: ${{ matrix.os }}
    name: Build ${{ matrix.platform }} Image
    
    steps:
      - name: Checkout updated code
        uses: actions/checkout@v4
        with:
          ref: main
          
      - name: Prepare platform variables
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=raw,value=latest
            type=raw,value={{date 'YYYYMMDD-HHmm'}}
            type=sha,prefix={{branch}}-

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get commit info
        id: vars
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v5
        with:
          platforms: ${{ matrix.platform }}
          context: .
          file: ./Dockerfile.database
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            SHA=${{ steps.vars.outputs.sha_short }}
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Export digest
        run: |
          rm -rf /tmp/digests
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"

      - name: Upload digest artifact
        uses: actions/upload-artifact@v4
        with:
          name: digest-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge-and-push:
    name: Create Multi-arch Manifest
    needs: [check-sync-and-build, build-multiarch]
    if: needs.check-sync-and-build.outputs.has_updates == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Download all digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digest-*
          merge-multiple: true

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          tags: |
            type=raw,value=latest
            type=raw,value={{date 'YYYYMMDD-HHmm'}}
            type=sha,prefix={{branch}}-

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Create manifest and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)

      - name: Inspect final image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}
    
      - name: Commit and push changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          git add .
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Auto-sync: Update from upstream and modify Dockerfile"
            git push origin main
            echo "Changes committed and pushed"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
